//  Be sure to give permission WRITE_EXTERNAL_STORAGE

import android.os.Environment;
import android.Manifest; 
import android.content.pm.PackageManager; 
import android.os.Build; 
import android.os.Build.VERSION_CODES; 
import processing.core.PConstants;
import android.app.Activity; 
import android.os.Environment;

Table table; 
Activity activity; 
boolean permissions_granted;
String tableFile = "scores.csv";
String tableFolder = "GameTables";
int[] scores = new int[10];

void setup() { 
  size(displayWidth, displayHeight);
  activity = this.getActivity();
  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1) { 
    requestParticularPermission();
  }
  
  for (int i = 0; i < scores.length; i++) {
    scores[i] = 0;
  }
  loadMyTable(tableFile);
  if (table != null) {
    for (TableRow row : table.rows()) {
      int id = row.getInt("id");
      scores[id] = row.getInt("score");
    }
  }
  printArray(scores);
 
  // gain points in game
  scores[0] = 123;
  scores[1] = 456;
  scores[9] = 789;
  setTableValues();
  printArray(scores);
}

void draw() {
}

void setTableValues() {
  table = new Table();
  table.addColumn("id");
  table.addColumn("score");
  for (int i = 0; i < scores.length; i++) {
    TableRow newRow = table.addRow();
    newRow.setInt("id", table.lastRowIndex());
    newRow.setInt("score", scores[i]);
  }
  saveMyTable(tableFile, tableFolder);
}

void saveMyTable(String file_s, String folder_s) { 
  try { 
    String absolute_path = new String(Environment.getExternalStorageDirectory().getAbsolutePath()); 
    File file = new File(absolute_path+"/"+folder_s); 
    println(file);
    if (!file.exists()) { 
      boolean success = true; 
      success = file.mkdirs();
    } 
    saveTable(table, file+"/"+file_s);
    println("File saved successfully.");
  } 
  catch (Exception e) { 
    println("Error while saving file: " + e);
  }
} 

void loadMyTable(String s) {
  try {
    String directory = new String(Environment.getExternalStorageDirectory().getAbsolutePath()+"/"+tableFolder+"/");
    table = loadTable(directory+s, "header");
    println(directory+s+tableFile);
  } 
  catch (Exception e) {
   println("first table loading");
  }
}

private static String[] PERMISSIONS_STORAGE = { Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE }; 
private void requestParticularPermission() { 
  activity.requestPermissions(PERMISSIONS_STORAGE, 2020);
}

public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) { 
  switch (requestCode) { 
  case 2020: 
    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) { 
      println("permissions granted");
      permissions_granted = true;
    } else { 
      println("permissions not granted");
    } 
    break; 
  default: 
    activity.onRequestPermissionsResult(requestCode, permissions, grantResults);
  }
}
